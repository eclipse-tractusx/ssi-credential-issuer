/********************************************************************************
 * Copyright (c) 2024 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License, Version 2.0 which is available at
 * https://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 ********************************************************************************/

// <auto-generated />

using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Org.Eclipse.TractusX.SsiCredentialIssuer.Entities;

namespace Org.Eclipse.TractusX.SsiCredentialIssuer.Migrations.Migrations
{
    [DbContext(typeof(IssuerDbContext))]
    partial class IssuerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("issuer")
                .UseCollation("en_US.utf8")
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.AuditEntities.AuditCompanySsiDetail20240228", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<string>("Bpnl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bpnl");

                    b.Property<int>("CompanySsiDetailStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("company_ssi_detail_status_id");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_user_id");

                    b.Property<string>("Credential")
                        .HasColumnType("text")
                        .HasColumnName("credential");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<int?>("ExpiryCheckTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("expiry_check_type_id");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_date");

                    b.Property<Guid?>("ExternalCredentialId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_credential_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("IssuerBpn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("issuer_bpn");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("process_id");

                    b.Property<Guid?>("VerifiedCredentialExternalTypeDetailVersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("verified_credential_external_type_detail_version_id");

                    b.Property<int>("VerifiedCredentialTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("verified_credential_type_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_company_ssi_detail20240228");

                    b.ToTable("audit_company_ssi_detail20240228", "issuer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.AuditEntities.AuditCompanySsiDetail20240419", b =>
                {
                    b.Property<Guid>("AuditV2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v2id");

                    b.Property<DateTimeOffset>("AuditV2DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v2date_last_changed");

                    b.Property<string>("AuditV2LastEditorId")
                        .HasColumnType("text")
                        .HasColumnName("audit_v2last_editor_id");

                    b.Property<int>("AuditV2OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v2operation_id");

                    b.Property<string>("Bpnl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bpnl");

                    b.Property<int>("CompanySsiDetailStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("company_ssi_detail_status_id");

                    b.Property<string>("CreatorUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("creator_user_id");

                    b.Property<string>("Credential")
                        .HasColumnType("text")
                        .HasColumnName("credential");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<int?>("ExpiryCheckTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("expiry_check_type_id");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_date");

                    b.Property<Guid?>("ExternalCredentialId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_credential_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("IssuerBpn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("issuer_bpn");

                    b.Property<string>("LastEditorId")
                        .HasColumnType("text")
                        .HasColumnName("last_editor_id");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("process_id");

                    b.Property<Guid?>("VerifiedCredentialExternalTypeDetailVersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("verified_credential_external_type_detail_version_id");

                    b.Property<int>("VerifiedCredentialTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("verified_credential_type_id");

                    b.HasKey("AuditV2Id")
                        .HasName("pk_audit_company_ssi_detail20240419");

                    b.ToTable("audit_company_ssi_detail20240419", "issuer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.AuditEntities.AuditCompanySsiDetail20240902", b =>
                {
                    b.Property<Guid>("AuditV2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v2id");

                    b.Property<DateTimeOffset>("AuditV2DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v2date_last_changed");

                    b.Property<string>("AuditV2LastEditorId")
                        .HasColumnType("text")
                        .HasColumnName("audit_v2last_editor_id");

                    b.Property<int>("AuditV2OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v2operation_id");

                    b.Property<string>("Bpnl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bpnl");

                    b.Property<int>("CompanySsiDetailStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("company_ssi_detail_status_id");

                    b.Property<string>("CreatorUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("creator_user_id");

                    b.Property<string>("Credential")
                        .HasColumnType("text")
                        .HasColumnName("credential");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<int?>("ExpiryCheckTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("expiry_check_type_id");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_date");

                    b.Property<Guid?>("ExternalCredentialId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_credential_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("IssuerBpn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("issuer_bpn");

                    b.Property<string>("LastEditorId")
                        .HasColumnType("text")
                        .HasColumnName("last_editor_id");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("process_id");

                    b.Property<Guid?>("ReissuedCredentialId")
                        .HasColumnType("uuid")
                        .HasColumnName("reissued_credential_id");

                    b.Property<Guid?>("VerifiedCredentialExternalTypeDetailVersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("verified_credential_external_type_detail_version_id");

                    b.Property<int>("VerifiedCredentialTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("verified_credential_type_id");

                    b.HasKey("AuditV2Id")
                        .HasName("pk_audit_company_ssi_detail20240902");

                    b.ToTable("audit_company_ssi_detail20240902", "issuer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.AuditEntities.AuditDocument20240305", b =>
                {
                    b.Property<Guid>("AuditV1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1id");

                    b.Property<DateTimeOffset>("AuditV1DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v1date_last_changed");

                    b.Property<Guid?>("AuditV1LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v1last_editor_id");

                    b.Property<int>("AuditV1OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v1operation_id");

                    b.Property<Guid?>("CompanyUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_user_id");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<byte[]>("DocumentContent")
                        .HasColumnType("bytea")
                        .HasColumnName("document_content");

                    b.Property<byte[]>("DocumentHash")
                        .HasColumnType("bytea")
                        .HasColumnName("document_hash");

                    b.Property<string>("DocumentName")
                        .HasColumnType("text")
                        .HasColumnName("document_name");

                    b.Property<int?>("DocumentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("document_status_id");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("document_type_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("LastEditorId")
                        .HasColumnType("uuid")
                        .HasColumnName("last_editor_id");

                    b.Property<int?>("MediaTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("media_type_id");

                    b.HasKey("AuditV1Id")
                        .HasName("pk_audit_document20240305");

                    b.ToTable("audit_document20240305", "issuer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.AuditEntities.AuditDocument20240419", b =>
                {
                    b.Property<Guid>("AuditV2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("audit_v2id");

                    b.Property<DateTimeOffset>("AuditV2DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_v2date_last_changed");

                    b.Property<string>("AuditV2LastEditorId")
                        .HasColumnType("text")
                        .HasColumnName("audit_v2last_editor_id");

                    b.Property<int>("AuditV2OperationId")
                        .HasColumnType("integer")
                        .HasColumnName("audit_v2operation_id");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<byte[]>("DocumentContent")
                        .HasColumnType("bytea")
                        .HasColumnName("document_content");

                    b.Property<byte[]>("DocumentHash")
                        .HasColumnType("bytea")
                        .HasColumnName("document_hash");

                    b.Property<string>("DocumentName")
                        .HasColumnType("text")
                        .HasColumnName("document_name");

                    b.Property<int?>("DocumentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("document_status_id");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("document_type_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("IdentityId")
                        .HasColumnType("text")
                        .HasColumnName("identity_id");

                    b.Property<string>("LastEditorId")
                        .HasColumnType("text")
                        .HasColumnName("last_editor_id");

                    b.Property<int?>("MediaTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("media_type_id");

                    b.HasKey("AuditV2Id")
                        .HasName("pk_audit_document20240419");

                    b.ToTable("audit_document20240419", "issuer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.CompanySsiDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Bpnl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bpnl");

                    b.Property<int>("CompanySsiDetailStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("company_ssi_detail_status_id");

                    b.Property<string>("CreatorUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("creator_user_id");

                    b.Property<string>("Credential")
                        .HasColumnType("text")
                        .HasColumnName("credential");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<int?>("ExpiryCheckTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("expiry_check_type_id");

                    b.Property<DateTimeOffset?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_date");

                    b.Property<Guid?>("ExternalCredentialId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_credential_id");

                    b.Property<string>("IssuerBpn")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("issuer_bpn");

                    b.Property<string>("LastEditorId")
                        .HasColumnType("text")
                        .HasColumnName("last_editor_id");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("process_id");

                    b.Property<Guid?>("ReissuedCredentialId")
                        .HasColumnType("uuid")
                        .HasColumnName("reissued_credential_id");

                    b.Property<Guid?>("VerifiedCredentialExternalTypeDetailVersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("verified_credential_external_type_detail_version_id");

                    b.Property<int>("VerifiedCredentialTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("verified_credential_type_id");

                    b.HasKey("Id")
                        .HasName("pk_company_ssi_details");

                    b.HasIndex("CompanySsiDetailStatusId")
                        .HasDatabaseName("ix_company_ssi_details_company_ssi_detail_status_id");

                    b.HasIndex("ExpiryCheckTypeId")
                        .HasDatabaseName("ix_company_ssi_details_expiry_check_type_id");

                    b.HasIndex("ProcessId")
                        .HasDatabaseName("ix_company_ssi_details_process_id");

                    b.HasIndex("ReissuedCredentialId")
                        .IsUnique()
                        .HasDatabaseName("ix_company_ssi_details_reissued_credential_id");

                    b.HasIndex("VerifiedCredentialExternalTypeDetailVersionId")
                        .HasDatabaseName("ix_company_ssi_details_verified_credential_external_type_detai");

                    b.HasIndex("VerifiedCredentialTypeId")
                        .HasDatabaseName("ix_company_ssi_details_verified_credential_type_id");

                    b.ToTable("company_ssi_details", "issuer", t =>
                        {
                            t.HasTrigger("LC_TRIGGER_AFTER_INSERT_COMPANYSSIDETAIL");

                            t.HasTrigger("LC_TRIGGER_AFTER_UPDATE_COMPANYSSIDETAIL");
                        });

                    b
                        .HasAnnotation("LC_TRIGGER_AFTER_INSERT_COMPANYSSIDETAIL", "CREATE FUNCTION \"issuer\".\"LC_TRIGGER_AFTER_INSERT_COMPANYSSIDETAIL\"() RETURNS trigger as $LC_TRIGGER_AFTER_INSERT_COMPANYSSIDETAIL$\r\nBEGIN\r\n  INSERT INTO \"issuer\".\"audit_company_ssi_detail20240902\" (\"id\", \"bpnl\", \"issuer_bpn\", \"verified_credential_type_id\", \"company_ssi_detail_status_id\", \"date_created\", \"creator_user_id\", \"expiry_date\", \"verified_credential_external_type_detail_version_id\", \"expiry_check_type_id\", \"process_id\", \"external_credential_id\", \"credential\", \"reissued_credential_id\", \"date_last_changed\", \"last_editor_id\", \"audit_v2id\", \"audit_v2operation_id\", \"audit_v2date_last_changed\", \"audit_v2last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"bpnl\", \r\n  NEW.\"issuer_bpn\", \r\n  NEW.\"verified_credential_type_id\", \r\n  NEW.\"company_ssi_detail_status_id\", \r\n  NEW.\"date_created\", \r\n  NEW.\"creator_user_id\", \r\n  NEW.\"expiry_date\", \r\n  NEW.\"verified_credential_external_type_detail_version_id\", \r\n  NEW.\"expiry_check_type_id\", \r\n  NEW.\"process_id\", \r\n  NEW.\"external_credential_id\", \r\n  NEW.\"credential\", \r\n  NEW.\"reissued_credential_id\", \r\n  NEW.\"date_last_changed\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  1, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_INSERT_COMPANYSSIDETAIL$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_INSERT_COMPANYSSIDETAIL AFTER INSERT\r\nON \"issuer\".\"company_ssi_details\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"issuer\".\"LC_TRIGGER_AFTER_INSERT_COMPANYSSIDETAIL\"();")
                        .HasAnnotation("LC_TRIGGER_AFTER_UPDATE_COMPANYSSIDETAIL", "CREATE FUNCTION \"issuer\".\"LC_TRIGGER_AFTER_UPDATE_COMPANYSSIDETAIL\"() RETURNS trigger as $LC_TRIGGER_AFTER_UPDATE_COMPANYSSIDETAIL$\r\nBEGIN\r\n  INSERT INTO \"issuer\".\"audit_company_ssi_detail20240902\" (\"id\", \"bpnl\", \"issuer_bpn\", \"verified_credential_type_id\", \"company_ssi_detail_status_id\", \"date_created\", \"creator_user_id\", \"expiry_date\", \"verified_credential_external_type_detail_version_id\", \"expiry_check_type_id\", \"process_id\", \"external_credential_id\", \"credential\", \"reissued_credential_id\", \"date_last_changed\", \"last_editor_id\", \"audit_v2id\", \"audit_v2operation_id\", \"audit_v2date_last_changed\", \"audit_v2last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"bpnl\", \r\n  NEW.\"issuer_bpn\", \r\n  NEW.\"verified_credential_type_id\", \r\n  NEW.\"company_ssi_detail_status_id\", \r\n  NEW.\"date_created\", \r\n  NEW.\"creator_user_id\", \r\n  NEW.\"expiry_date\", \r\n  NEW.\"verified_credential_external_type_detail_version_id\", \r\n  NEW.\"expiry_check_type_id\", \r\n  NEW.\"process_id\", \r\n  NEW.\"external_credential_id\", \r\n  NEW.\"credential\", \r\n  NEW.\"reissued_credential_id\", \r\n  NEW.\"date_last_changed\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  2, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_UPDATE_COMPANYSSIDETAIL$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_UPDATE_COMPANYSSIDETAIL AFTER UPDATE\r\nON \"issuer\".\"company_ssi_details\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"issuer\".\"LC_TRIGGER_AFTER_UPDATE_COMPANYSSIDETAIL\"();");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.CompanySsiDetailAssignedDocument", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<Guid>("CompanySsiDetailId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_ssi_detail_id");

                    b.HasKey("DocumentId", "CompanySsiDetailId")
                        .HasName("pk_company_ssi_detail_assigned_documents");

                    b.HasIndex("CompanySsiDetailId")
                        .HasDatabaseName("ix_company_ssi_detail_assigned_documents_company_ssi_detail_id");

                    b.ToTable("company_ssi_detail_assigned_documents", "issuer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.CompanySsiDetailStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_company_ssi_detail_statuses");

                    b.ToTable("company_ssi_detail_statuses", "issuer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "PENDING"
                        },
                        new
                        {
                            Id = 2,
                            Label = "ACTIVE"
                        },
                        new
                        {
                            Id = 3,
                            Label = "REVOKED"
                        },
                        new
                        {
                            Id = 4,
                            Label = "INACTIVE"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.CompanySsiProcessData", b =>
                {
                    b.Property<Guid>("CompanySsiDetailId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_ssi_detail_id");

                    b.Property<string>("CallbackUrl")
                        .HasColumnType("text")
                        .HasColumnName("callback_url");

                    b.Property<string>("ClientId")
                        .HasColumnType("text")
                        .HasColumnName("client_id");

                    b.Property<byte[]>("ClientSecret")
                        .HasColumnType("bytea")
                        .HasColumnName("client_secret");

                    b.Property<int>("CredentialTypeKindId")
                        .HasColumnType("integer")
                        .HasColumnName("credential_type_kind_id");

                    b.Property<int?>("EncryptionMode")
                        .HasColumnType("integer")
                        .HasColumnName("encryption_mode");

                    b.Property<string>("HolderWalletUrl")
                        .HasColumnType("text")
                        .HasColumnName("holder_wallet_url");

                    b.Property<byte[]>("InitializationVector")
                        .HasColumnType("bytea")
                        .HasColumnName("initialization_vector");

                    b.Property<JsonDocument>("Schema")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("schema");

                    b.HasKey("CompanySsiDetailId")
                        .HasName("pk_company_ssi_process_data");

                    b.HasIndex("CredentialTypeKindId")
                        .HasDatabaseName("ix_company_ssi_process_data_credential_type_kind_id");

                    b.ToTable("company_ssi_process_data", "issuer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<byte[]>("DocumentContent")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("document_content");

                    b.Property<byte[]>("DocumentHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("document_hash");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("document_name");

                    b.Property<int>("DocumentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("document_status_id");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("document_type_id");

                    b.Property<string>("IdentityId")
                        .HasColumnType("text")
                        .HasColumnName("identity_id");

                    b.Property<string>("LastEditorId")
                        .HasColumnType("text")
                        .HasColumnName("last_editor_id");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("media_type_id");

                    b.HasKey("Id")
                        .HasName("pk_documents");

                    b.HasIndex("DocumentStatusId")
                        .HasDatabaseName("ix_documents_document_status_id");

                    b.HasIndex("DocumentTypeId")
                        .HasDatabaseName("ix_documents_document_type_id");

                    b.HasIndex("MediaTypeId")
                        .HasDatabaseName("ix_documents_media_type_id");

                    b.ToTable("documents", "issuer", t =>
                        {
                            t.HasTrigger("LC_TRIGGER_AFTER_INSERT_DOCUMENT");

                            t.HasTrigger("LC_TRIGGER_AFTER_UPDATE_DOCUMENT");
                        });

                    b
                        .HasAnnotation("LC_TRIGGER_AFTER_INSERT_DOCUMENT", "CREATE FUNCTION \"issuer\".\"LC_TRIGGER_AFTER_INSERT_DOCUMENT\"() RETURNS trigger as $LC_TRIGGER_AFTER_INSERT_DOCUMENT$\r\nBEGIN\r\n  INSERT INTO \"issuer\".\"audit_document20240419\" (\"id\", \"date_created\", \"document_hash\", \"document_content\", \"document_name\", \"media_type_id\", \"document_type_id\", \"document_status_id\", \"identity_id\", \"date_last_changed\", \"last_editor_id\", \"audit_v2id\", \"audit_v2operation_id\", \"audit_v2date_last_changed\", \"audit_v2last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"date_created\", \r\n  NEW.\"document_hash\", \r\n  NEW.\"document_content\", \r\n  NEW.\"document_name\", \r\n  NEW.\"media_type_id\", \r\n  NEW.\"document_type_id\", \r\n  NEW.\"document_status_id\", \r\n  NEW.\"identity_id\", \r\n  NEW.\"date_last_changed\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  1, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_INSERT_DOCUMENT$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_INSERT_DOCUMENT AFTER INSERT\r\nON \"issuer\".\"documents\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"issuer\".\"LC_TRIGGER_AFTER_INSERT_DOCUMENT\"();")
                        .HasAnnotation("LC_TRIGGER_AFTER_UPDATE_DOCUMENT", "CREATE FUNCTION \"issuer\".\"LC_TRIGGER_AFTER_UPDATE_DOCUMENT\"() RETURNS trigger as $LC_TRIGGER_AFTER_UPDATE_DOCUMENT$\r\nBEGIN\r\n  INSERT INTO \"issuer\".\"audit_document20240419\" (\"id\", \"date_created\", \"document_hash\", \"document_content\", \"document_name\", \"media_type_id\", \"document_type_id\", \"document_status_id\", \"identity_id\", \"date_last_changed\", \"last_editor_id\", \"audit_v2id\", \"audit_v2operation_id\", \"audit_v2date_last_changed\", \"audit_v2last_editor_id\") SELECT NEW.\"id\", \r\n  NEW.\"date_created\", \r\n  NEW.\"document_hash\", \r\n  NEW.\"document_content\", \r\n  NEW.\"document_name\", \r\n  NEW.\"media_type_id\", \r\n  NEW.\"document_type_id\", \r\n  NEW.\"document_status_id\", \r\n  NEW.\"identity_id\", \r\n  NEW.\"date_last_changed\", \r\n  NEW.\"last_editor_id\", \r\n  gen_random_uuid(), \r\n  2, \r\n  CURRENT_TIMESTAMP, \r\n  NEW.\"last_editor_id\";\r\nRETURN NEW;\r\nEND;\r\n$LC_TRIGGER_AFTER_UPDATE_DOCUMENT$ LANGUAGE plpgsql;\r\nCREATE TRIGGER LC_TRIGGER_AFTER_UPDATE_DOCUMENT AFTER UPDATE\r\nON \"issuer\".\"documents\"\r\nFOR EACH ROW EXECUTE PROCEDURE \"issuer\".\"LC_TRIGGER_AFTER_UPDATE_DOCUMENT\"();");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.DocumentStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_document_status");

                    b.ToTable("document_status", "issuer");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            Label = "ACTIVE"
                        },
                        new
                        {
                            Id = 3,
                            Label = "INACTIVE"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_document_types");

                    b.ToTable("document_types", "issuer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "PRESENTATION"
                        },
                        new
                        {
                            Id = 2,
                            Label = "CREDENTIAL"
                        },
                        new
                        {
                            Id = 3,
                            Label = "VERIFIED_CREDENTIAL"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.ExpiryCheckType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_expiry_check_types");

                    b.ToTable("expiry_check_types", "issuer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "ONE_MONTH"
                        },
                        new
                        {
                            Id = 2,
                            Label = "TWO_WEEKS"
                        },
                        new
                        {
                            Id = 3,
                            Label = "ONE_DAY"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.MediaType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_media_types");

                    b.ToTable("media_types", "issuer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "JPEG"
                        },
                        new
                        {
                            Id = 2,
                            Label = "GIF"
                        },
                        new
                        {
                            Id = 3,
                            Label = "PNG"
                        },
                        new
                        {
                            Id = 4,
                            Label = "SVG"
                        },
                        new
                        {
                            Id = 5,
                            Label = "TIFF"
                        },
                        new
                        {
                            Id = 6,
                            Label = "PDF"
                        },
                        new
                        {
                            Id = 7,
                            Label = "JSON"
                        },
                        new
                        {
                            Id = 8,
                            Label = "PEM"
                        },
                        new
                        {
                            Id = 9,
                            Label = "CA_CERT"
                        },
                        new
                        {
                            Id = 10,
                            Label = "PKX_CER"
                        },
                        new
                        {
                            Id = 11,
                            Label = "OCTET"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset?>("LockExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lock_expiry_date");

                    b.Property<int>("ProcessTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("process_type_id");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_processes");

                    b.HasIndex("ProcessTypeId")
                        .HasDatabaseName("ix_processes_process_type_id");

                    b.ToTable("processes", "issuer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.ProcessStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTimeOffset?>("DateLastChanged")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_last_changed");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uuid")
                        .HasColumnName("process_id");

                    b.Property<int>("ProcessStepStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("process_step_status_id");

                    b.Property<int>("ProcessStepTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("process_step_type_id");

                    b.HasKey("Id")
                        .HasName("pk_process_steps");

                    b.HasIndex("ProcessId")
                        .HasDatabaseName("ix_process_steps_process_id");

                    b.HasIndex("ProcessStepStatusId")
                        .HasDatabaseName("ix_process_steps_process_step_status_id");

                    b.HasIndex("ProcessStepTypeId")
                        .HasDatabaseName("ix_process_steps_process_step_type_id");

                    b.ToTable("process_steps", "issuer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.ProcessStepStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_process_step_statuses");

                    b.ToTable("process_step_statuses", "issuer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "TODO"
                        },
                        new
                        {
                            Id = 2,
                            Label = "DONE"
                        },
                        new
                        {
                            Id = 3,
                            Label = "SKIPPED"
                        },
                        new
                        {
                            Id = 4,
                            Label = "FAILED"
                        },
                        new
                        {
                            Id = 5,
                            Label = "DUPLICATE"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.ProcessStepType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_process_step_types");

                    b.ToTable("process_step_types", "issuer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "CREATE_CREDENTIAL"
                        },
                        new
                        {
                            Id = 2,
                            Label = "SIGN_CREDENTIAL"
                        },
                        new
                        {
                            Id = 3,
                            Label = "SAVE_CREDENTIAL_DOCUMENT"
                        },
                        new
                        {
                            Id = 4,
                            Label = "CREATE_CREDENTIAL_FOR_HOLDER"
                        },
                        new
                        {
                            Id = 5,
                            Label = "TRIGGER_CALLBACK"
                        },
                        new
                        {
                            Id = 6,
                            Label = "REVOKE_REISSUED_CREDENTIAL"
                        },
                        new
                        {
                            Id = 100,
                            Label = "REVOKE_CREDENTIAL"
                        },
                        new
                        {
                            Id = 101,
                            Label = "TRIGGER_NOTIFICATION"
                        },
                        new
                        {
                            Id = 102,
                            Label = "TRIGGER_MAIL"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.ProcessType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_process_types");

                    b.ToTable("process_types", "issuer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "CREATE_CREDENTIAL"
                        },
                        new
                        {
                            Id = 2,
                            Label = "DECLINE_CREDENTIAL"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.UseCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Shortname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("shortname");

                    b.HasKey("Id")
                        .HasName("pk_use_cases");

                    b.ToTable("use_cases", "issuer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialExternalType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_verified_credential_external_types");

                    b.ToTable("verified_credential_external_types", "issuer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "TRACEABILITY_CREDENTIAL"
                        },
                        new
                        {
                            Id = 2,
                            Label = "PCF_CREDENTIAL"
                        },
                        new
                        {
                            Id = 3,
                            Label = "BEHAVIOR_TWIN_CREDENTIAL"
                        },
                        new
                        {
                            Id = 4,
                            Label = "MEMBERSHIP_CREDENTIAL"
                        },
                        new
                        {
                            Id = 5,
                            Label = "CIRCULAR_ECONOMY"
                        },
                        new
                        {
                            Id = 6,
                            Label = "QUALITY_CREDENTIAL"
                        },
                        new
                        {
                            Id = 7,
                            Label = "BUSINESS_PARTNER_NUMBER"
                        },
                        new
                        {
                            Id = 8,
                            Label = "DEMAND_AND_CAPACITY_MANAGEMENT"
                        },
                        new
                        {
                            Id = 9,
                            Label = "DEMAND_AND_CAPACITY_MANAGEMENT_PURIS"
                        },
                        new
                        {
                            Id = 10,
                            Label = "BUSINESS_PARTNER_DATA_MANAGEMENT"
                        },
                        new
                        {
                            Id = 11,
                            Label = "FRAMEWORK_AGREEMENT"
                        },
                        new
                        {
                            Id = 12,
                            Label = "DATA_EXCHANGE_GOVERNANCE_CREDENTIAL"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialExternalTypeDetailVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Expiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry");

                    b.Property<string>("Template")
                        .HasColumnType("text")
                        .HasColumnName("template");

                    b.Property<DateTimeOffset>("ValidFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("valid_from");

                    b.Property<int>("VerifiedCredentialExternalTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("verified_credential_external_type_id");

                    b.Property<string>("Version")
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_verified_credential_external_type_detail_versions");

                    b.HasIndex("VerifiedCredentialExternalTypeId", "Version")
                        .IsUnique()
                        .HasDatabaseName("ix_verified_credential_external_type_detail_versions_verified_");

                    b.ToTable("verified_credential_external_type_detail_versions", "issuer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_verified_credential_types");

                    b.ToTable("verified_credential_types", "issuer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "TRACEABILITY_FRAMEWORK"
                        },
                        new
                        {
                            Id = 2,
                            Label = "PCF_FRAMEWORK"
                        },
                        new
                        {
                            Id = 3,
                            Label = "BEHAVIOR_TWIN_FRAMEWORK"
                        },
                        new
                        {
                            Id = 4,
                            Label = "MEMBERSHIP"
                        },
                        new
                        {
                            Id = 5,
                            Label = "CIRCULAR_ECONOMY"
                        },
                        new
                        {
                            Id = 6,
                            Label = "FRAMEWORK_AGREEMENT_QUALITY"
                        },
                        new
                        {
                            Id = 7,
                            Label = "BUSINESS_PARTNER_NUMBER"
                        },
                        new
                        {
                            Id = 8,
                            Label = "DEMAND_AND_CAPACITY_MANAGEMENT"
                        },
                        new
                        {
                            Id = 9,
                            Label = "DEMAND_AND_CAPACITY_MANAGEMENT_PURIS"
                        },
                        new
                        {
                            Id = 10,
                            Label = "BUSINESS_PARTNER_DATA_MANAGEMENT"
                        },
                        new
                        {
                            Id = 11,
                            Label = "FRAMEWORK_AGREEMENT"
                        },
                        new
                        {
                            Id = 12,
                            Label = "DATA_EXCHANGE_GOVERNANCE_CREDENTIAL"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialTypeAssignedExternalType", b =>
                {
                    b.Property<int>("VerifiedCredentialTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("verified_credential_type_id");

                    b.Property<int>("VerifiedCredentialExternalTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("verified_credential_external_type_id");

                    b.HasKey("VerifiedCredentialTypeId", "VerifiedCredentialExternalTypeId")
                        .HasName("pk_verified_credential_type_assigned_external_types");

                    b.HasIndex("VerifiedCredentialExternalTypeId")
                        .HasDatabaseName("ix_verified_credential_type_assigned_external_types_verified_c");

                    b.HasIndex("VerifiedCredentialTypeId")
                        .IsUnique()
                        .HasDatabaseName("ix_verified_credential_type_assigned_external_types_verified_c1");

                    b.ToTable("verified_credential_type_assigned_external_types", "issuer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialTypeAssignedKind", b =>
                {
                    b.Property<int>("VerifiedCredentialTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("verified_credential_type_id");

                    b.Property<int>("VerifiedCredentialTypeKindId")
                        .HasColumnType("integer")
                        .HasColumnName("verified_credential_type_kind_id");

                    b.HasKey("VerifiedCredentialTypeId", "VerifiedCredentialTypeKindId")
                        .HasName("pk_verified_credential_type_assigned_kinds");

                    b.HasIndex("VerifiedCredentialTypeId")
                        .HasDatabaseName("ix_verified_credential_type_assigned_kinds_verified_credential");

                    b.HasIndex("VerifiedCredentialTypeKindId")
                        .HasDatabaseName("ix_verified_credential_type_assigned_kinds_verified_credential1");

                    b.ToTable("verified_credential_type_assigned_kinds", "issuer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialTypeAssignedUseCase", b =>
                {
                    b.Property<int>("VerifiedCredentialTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("verified_credential_type_id");

                    b.Property<Guid>("UseCaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("use_case_id");

                    b.HasKey("VerifiedCredentialTypeId", "UseCaseId")
                        .HasName("pk_verified_credential_type_assigned_use_cases");

                    b.HasIndex("UseCaseId")
                        .IsUnique()
                        .HasDatabaseName("ix_verified_credential_type_assigned_use_cases_use_case_id");

                    b.HasIndex("VerifiedCredentialTypeId")
                        .IsUnique()
                        .HasDatabaseName("ix_verified_credential_type_assigned_use_cases_verified_creden");

                    b.ToTable("verified_credential_type_assigned_use_cases", "issuer");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialTypeKind", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("label");

                    b.HasKey("Id")
                        .HasName("pk_verified_credential_type_kinds");

                    b.ToTable("verified_credential_type_kinds", "issuer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Label = "FRAMEWORK"
                        },
                        new
                        {
                            Id = 2,
                            Label = "MEMBERSHIP"
                        },
                        new
                        {
                            Id = 3,
                            Label = "BPN"
                        });
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.CompanySsiDetail", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.CompanySsiDetailStatus", "CompanySsiDetailStatus")
                        .WithMany("CompanySsiDetails")
                        .HasForeignKey("CompanySsiDetailStatusId")
                        .IsRequired()
                        .HasConstraintName("fk_company_ssi_details_company_ssi_detail_statuses_company_ssi");

                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.ExpiryCheckType", "ExpiryCheckType")
                        .WithMany("CompanySsiDetails")
                        .HasForeignKey("ExpiryCheckTypeId")
                        .HasConstraintName("fk_company_ssi_details_expiry_check_types_expiry_check_type_id");

                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.Process", "Process")
                        .WithMany("CompanySsiDetails")
                        .HasForeignKey("ProcessId")
                        .HasConstraintName("fk_company_ssi_details_processes_process_id");

                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.CompanySsiDetail", "ReissuedCredential")
                        .WithOne()
                        .HasForeignKey("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.CompanySsiDetail", "ReissuedCredentialId")
                        .HasConstraintName("fk_company_ssi_details_company_ssi_details_reissued_credential");

                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialExternalTypeDetailVersion", "VerifiedCredentialExternalTypeDetailVersion")
                        .WithMany("CompanySsiDetails")
                        .HasForeignKey("VerifiedCredentialExternalTypeDetailVersionId")
                        .HasConstraintName("fk_company_ssi_details_verified_credential_external_type_detai");

                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialType", "VerifiedCredentialType")
                        .WithMany("CompanySsiDetails")
                        .HasForeignKey("VerifiedCredentialTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_company_ssi_details_verified_credential_types_verified_cred");

                    b.Navigation("CompanySsiDetailStatus");

                    b.Navigation("ExpiryCheckType");

                    b.Navigation("Process");

                    b.Navigation("ReissuedCredential");

                    b.Navigation("VerifiedCredentialExternalTypeDetailVersion");

                    b.Navigation("VerifiedCredentialType");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.CompanySsiDetailAssignedDocument", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.CompanySsiDetail", "CompanySsiDetail")
                        .WithMany()
                        .HasForeignKey("CompanySsiDetailId")
                        .IsRequired()
                        .HasConstraintName("fk_company_ssi_detail_assigned_documents_company_ssi_details_c");

                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("fk_company_ssi_detail_assigned_documents_documents_document_id");

                    b.Navigation("CompanySsiDetail");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.CompanySsiProcessData", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.CompanySsiDetail", "CompanySsiDetail")
                        .WithOne("CompanySsiProcessData")
                        .HasForeignKey("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.CompanySsiProcessData", "CompanySsiDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_ssi_process_data_company_ssi_details_company_ssi_de");

                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialTypeKind", "CredentialTypeKind")
                        .WithMany("CompanySsiProcessData")
                        .HasForeignKey("CredentialTypeKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_ssi_process_data_verified_credential_type_kinds_cre");

                    b.Navigation("CompanySsiDetail");

                    b.Navigation("CredentialTypeKind");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.Document", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.DocumentStatus", "DocumentStatus")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_documents_document_status_document_status_id");

                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_documents_document_types_document_type_id");

                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.MediaType", "MediaType")
                        .WithMany("Documents")
                        .HasForeignKey("MediaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_documents_media_types_media_type_id");

                    b.Navigation("DocumentStatus");

                    b.Navigation("DocumentType");

                    b.Navigation("MediaType");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.Process", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.ProcessType", "ProcessType")
                        .WithMany("Processes")
                        .HasForeignKey("ProcessTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_processes_process_types_process_type_id");

                    b.Navigation("ProcessType");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.ProcessStep", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.Process", "Process")
                        .WithMany("ProcessSteps")
                        .HasForeignKey("ProcessId")
                        .IsRequired()
                        .HasConstraintName("fk_process_steps_processes_process_id");

                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.ProcessStepStatus", "ProcessStepStatus")
                        .WithMany("ProcessSteps")
                        .HasForeignKey("ProcessStepStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_process_steps_process_step_statuses_process_step_status_id");

                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.ProcessStepType", "ProcessStepType")
                        .WithMany("ProcessSteps")
                        .HasForeignKey("ProcessStepTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_process_steps_process_step_types_process_step_type_id");

                    b.Navigation("Process");

                    b.Navigation("ProcessStepStatus");

                    b.Navigation("ProcessStepType");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialExternalTypeDetailVersion", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialExternalType", "VerifiedCredentialExternalType")
                        .WithMany("VerifiedCredentialExternalTypeDetailVersions")
                        .HasForeignKey("VerifiedCredentialExternalTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_verified_credential_external_type_detail_versions_verified_");

                    b.Navigation("VerifiedCredentialExternalType");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialTypeAssignedExternalType", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialExternalType", "VerifiedCredentialExternalType")
                        .WithMany("VerifiedCredentialTypeAssignedExternalTypes")
                        .HasForeignKey("VerifiedCredentialExternalTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_verified_credential_type_assigned_external_types_verified_c");

                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialType", "VerifiedCredentialType")
                        .WithOne("VerifiedCredentialTypeAssignedExternalType")
                        .HasForeignKey("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialTypeAssignedExternalType", "VerifiedCredentialTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_verified_credential_type_assigned_external_types_verified_c1");

                    b.Navigation("VerifiedCredentialExternalType");

                    b.Navigation("VerifiedCredentialType");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialTypeAssignedKind", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialType", "VerifiedCredentialType")
                        .WithOne("VerifiedCredentialTypeAssignedKind")
                        .HasForeignKey("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialTypeAssignedKind", "VerifiedCredentialTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_verified_credential_type_assigned_kinds_verified_credential");

                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialTypeKind", "VerifiedCredentialTypeKind")
                        .WithMany("VerifiedCredentialTypeAssignedKinds")
                        .HasForeignKey("VerifiedCredentialTypeKindId")
                        .IsRequired()
                        .HasConstraintName("fk_verified_credential_type_assigned_kinds_verified_credential1");

                    b.Navigation("VerifiedCredentialType");

                    b.Navigation("VerifiedCredentialTypeKind");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialTypeAssignedUseCase", b =>
                {
                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.UseCase", "UseCase")
                        .WithOne("VerifiedCredentialAssignedUseCase")
                        .HasForeignKey("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialTypeAssignedUseCase", "UseCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_verified_credential_type_assigned_use_cases_use_cases_use_c");

                    b.HasOne("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialType", "VerifiedCredentialType")
                        .WithOne("VerifiedCredentialTypeAssignedUseCase")
                        .HasForeignKey("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialTypeAssignedUseCase", "VerifiedCredentialTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_verified_credential_type_assigned_use_cases_verified_creden");

                    b.Navigation("UseCase");

                    b.Navigation("VerifiedCredentialType");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.CompanySsiDetail", b =>
                {
                    b.Navigation("CompanySsiProcessData");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.CompanySsiDetailStatus", b =>
                {
                    b.Navigation("CompanySsiDetails");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.DocumentStatus", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.ExpiryCheckType", b =>
                {
                    b.Navigation("CompanySsiDetails");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.MediaType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.Process", b =>
                {
                    b.Navigation("CompanySsiDetails");

                    b.Navigation("ProcessSteps");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.ProcessStepStatus", b =>
                {
                    b.Navigation("ProcessSteps");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.ProcessStepType", b =>
                {
                    b.Navigation("ProcessSteps");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.ProcessType", b =>
                {
                    b.Navigation("Processes");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.UseCase", b =>
                {
                    b.Navigation("VerifiedCredentialAssignedUseCase");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialExternalType", b =>
                {
                    b.Navigation("VerifiedCredentialExternalTypeDetailVersions");

                    b.Navigation("VerifiedCredentialTypeAssignedExternalTypes");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialExternalTypeDetailVersion", b =>
                {
                    b.Navigation("CompanySsiDetails");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialType", b =>
                {
                    b.Navigation("CompanySsiDetails");

                    b.Navigation("VerifiedCredentialTypeAssignedExternalType");

                    b.Navigation("VerifiedCredentialTypeAssignedKind");

                    b.Navigation("VerifiedCredentialTypeAssignedUseCase");
                });

            modelBuilder.Entity("Org.Eclipse.TractusX.SsiCredentialIssuer.Entities.Entities.VerifiedCredentialTypeKind", b =>
                {
                    b.Navigation("CompanySsiProcessData");

                    b.Navigation("VerifiedCredentialTypeAssignedKinds");
                });
#pragma warning restore 612, 618
        }
    }
}
